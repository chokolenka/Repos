package com.company.data;

import com.company.Persons;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Unmarshaller;

import java.io.File;

public class ReadXmlFile {
    public static void main(String[] args) {
        Persons persons = null;
        JAXBContext jaxbContext   = null;
        try {
            jaxbContext = JAXBContext.newInstance( Persons.class );
            Unmarshaller jaxbUnmarshaller   = jaxbContext.createUnmarshaller();
            persons = (Persons) jaxbUnmarshaller.unmarshal(new File("src/com/company/data/data.xml"));
        } catch (JAXBException e) {
            e.printStackTrace();
        }
        persons.getPersons().stream().forEach(System.out::println);
    }
}


import java.util.Arrays;
import java.util.List;

public class WriteXmlFile {
    public static void main(String[] args) {
        Person person =
                new Person(1, "John", Arrays.asList("john@gmail.com", "john@yandex.ru "));
        Person person2 =
                new Person(2, "Jane", Arrays.asList("Jane@gmail.com", "Jane@yandex.ru "));

        List<Person> personsList = new ArrayList<>();
        personsList.add(person);
        personsList.add(person2);

        Persons persons = new Persons();
        persons.setPersons(personsList);

        JAXBContext jaxbContext = null;
        try {
            jaxbContext = JAXBContext.newInstance(Persons.class);
            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
            jaxbMarshaller.marshal(persons, new File("src/com/company/data/data.xml"));
        } catch (JAXBException e) {
            e.printStackTrace();
        }
    }
}

import jakarta.xml.bind.annotation.*;

import java.util.List;
@XmlRootElement(name="Person")
@XmlAccessorType(XmlAccessType.FIELD)
public class Person {
    private int id;
    private String name; // это просто строка
    @XmlElementWrapper(name="emails")
    @XmlElement(name="email")
    private List<String> emails;

    public Person(){} // пустой конструктор

    public Person(int id, String name, List<String> emails) {
        this.id = id;
        this.name = name;
        this.emails = emails;
    }
}

package com.company;


import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;

import java.util.ArrayList;
import java.util.List;

@XmlRootElement(name="person")
@XmlAccessorType(XmlAccessType.FIELD)

public class Persons {
    @XmlElement(name="person")
    private List<Person> persons = new ArrayList<>() ;
    public List<Person> getPersons() {
        return persons;
    }

    public void setPersons(List<Person> persons) {
        this.persons = persons;
    }

    public void add(Person person) { persons.add(person);}

}


package com.company;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.InputMismatchException;
import java.util.Scanner;

public class BultinExceptions {
    public static void main(String[] args) {
        //processInputException();
        //processDivisionByZero();
        //processDReadFile();

        String s=null;
        try {
            System.out.println(s.length());
        }
        catch (NullPointerException e){
            System.out.println("Null pointer");
        }
    s="1.2";
        try {
            int i = Integer.parseInt(s);
        }
        catch (NumberFormatException e)
        {
            System.err.println("Wrong format of the number");
        }

        try {
            InputStream is = new FileInputStream("src/com/company/file.txt");
        } catch (FileNotFoundException e) {
            System.err.println("File not found");
            //e.printStackTrace();
        }
    }

    private static  void processInputException(){
        Scanner scanner = new Scanner(
                System.in
        );
        System.out.println("Enter an integer number");
        boolean state;
        int a=0;

        do {


            try{
                state=false;
                a=scanner.nextInt();

            }
            catch (InputMismatchException e){
                scanner.nextLine();
                System.out.println("Wrong format of the number!");
                state=true;
            }
        }
        //InputMismatchException
        while (state);
        System.out.printf("a=%d%n",a);
    }
    static void proccessDivisionByZero(){
        int a=1,b=0;
        try{
            b=a/0;
        }
        catch (ArithmeticException e){
            System.err.println("Error,division by zero");
            e.printStackTrace();
        }
        System.out.println(b);
    }
}


package com.company;

public class UserExeptions {
    public static void main(String[] args) throws NotEvenException,NotInRange {
        // проверка на четность
        int n = 2;
        if (n%2!=0)
            throw new NotEvenException("The number is not even");

        // проверка попадания числа в диапазон 1...10
        n=0;
        if (n<1 || n>10)
            try{
            throw new NotInRange("The number is not in range 1...10");
        } catch (NotInRange NotInRange) {
                System.out.println("The number is not in range");
            }
    }
}
        class NotEvenException extends Exception{
            NotEvenException(String s) {
                super(s);
            }
        }

        class NotInRange extends Exception{
            NotInRange(String s) {
        super(s);
    }
}



package com.company;

import java.util.Scanner;

public class ThrowsExceptions {
    public static void main(String[] args) {
        // дан номер месяца, вывести пору года
        // при необходимости выбросить исключения
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the month: ");
        int month = scanner.nextInt();
        if (month<1 || month>12) throw new IllegalArgumentException(
                String.format("month %d is invalid, the number should be in range 1..12", month));
        String season;
        if (month<3) season = "winter";
        else if (month<6) season = "spring";
        else if (month<9) season = "summer";
        else if (month<12) season = "autumn";
        else  season = "winter";
        System.out.println("season");
    }
}


