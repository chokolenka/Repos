<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>SeleniumGithub</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>13</maven.compiler.source>
        <maven.compiler.target>13</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>4.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.8.2</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.4.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>


package istockphoto;

import org.junit.Test;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.openqa.selenium.edge.EdgeDriver;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class IStockPhotoEdge extends IStockPhotoChrome{

    @Test
    @Order(1)
    public void openBrowser(){
        System.setProperty("webdriver.edge.driver", "düòï–≥–∫/msedgedriver.exe");
        driver = new EdgeDriver();
        driver.get(baseUrl);
        driver.manage().window().maximize();
    }

}

package istockphoto;

import com.sun.org.apache.bcel.internal.generic.Select;
import org.graalvm.compiler.debug.Assertions;
import org.junit.Test;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import java.util.Random;

    @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
    public class IStockPhotoChrome {
        protected static WebDriver driver=null;
        protected final String baseUrl="https://www.istockphoto.com/ru/";

        @Test
        @Order(1)
        public void openBrowser(){
            System.setProperty("webdriver.chrome.driver", "d:/–≥–∫/chromedriver.exe");
            driver = new ChromeDriver();
            driver.get(baseUrl);
            driver.manage().window().maximize();
        }

        @Test
        @Order(2)
        @Disabled
        //–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"
        public void getArchitecture() {
            driver.get(baseUrl+"—Å—Ç–æ–∫–æ–≤–æ–µ-–≤–∏–¥–µ–æ/–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞");
            Assertions.assertTrue(driver.getTitle().toUpperCase().contains("—Å—Ç–æ–∫–æ–≤—ã–µ hd –≤–∏–¥–µ–æ–∫–ª–∏–ø—ã".toUpperCase()));
        }

        @Test
        @Order(3)
        //–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        public void register() {
            driver.get(baseUrl+"join");
            Assertions.assertTrue(driver.getTitle().toUpperCase().contains("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è".toUpperCase()));
        }

        @Test
        @Order(4)
        //–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        public void signUp() {
            WebElement email = driver.findElement(By.id("register_email"));

            email.sendKeys(generate());
            WebElement password = driver.findElement(By.id("register_password"));
            password.sendKeys("abcd1234");
            WebElement passwordConfirm = driver.findElement(By.id("register_password_confirmation"));
            passwordConfirm.sendKeys("abcd1234");
            Select countries = new Select(driver.findElement(By.id("register_country_code")));
            countries.selectByVisibleText("–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è");
            WebElement checkbox = driver.findElement(By.id("checkbox"));

            checkbox.click();
            WebElement button = driver.findElement(By.xpath("//*[@id='register-button']"));

            button.click();
        }

        @Test
        @Order(5)
        @Disabled
        public void signOut(){
            driver.get(baseUrl+"sign-out");
            Assertions.assertTrue(driver.getTitle().toUpperCase().contains("Stock images".toUpperCase()));
        }

        public String generate(){
            String s = "";
            Random random = new Random();
            for (int i=0; i<4; i++){
                int n = random.nextInt(26)+97;
                char c=(char)n;
                s+=c;
            }
            int number = random.nextInt(1000)+1000;
            s+=String.valueOf(number);

            s+="@gmail.com";
            System.out.println(s);
            return s;
        }
    }






